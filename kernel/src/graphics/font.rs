use crate::drivers::framebuffer::Framebuffer;
use crate::drivers::DeviceError;
use super::geometry::{Point, Rect, Color};
use super::primitives::GraphicsRenderer;

pub const FONT_WIDTH: u32 = 8;
pub const FONT_HEIGHT: u32 = 16;

#[rustfmt::skip]
static BASIC_FONT: [[u8; 16]; 128] = [
    // 0x00: NULL
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x01 - 0x1F: Control characters (using empty space)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x20: SPACE
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x21: !
    [0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
     0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x22: "
    [0x00, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x23: #
    [0x00, 0x36, 0x36, 0x7f, 0x36, 0x7f, 0x36, 0x36,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x24: $
    [0x18, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x18, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x25: %
    [0x00, 0x63, 0x66, 0x0c, 0x18, 0x30, 0x66, 0x63,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x26: &
    [0x00, 0x1c, 0x36, 0x1c, 0x38, 0x6f, 0x66, 0x3f,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x27: '
    [0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x28: (
    [0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x29: )
    [0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x2A: *
    [0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x2B: +
    [0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x2C: ,
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x2D: -
    [0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x2E: .
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x2F: /
    [0x00, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x40,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x30-0x39: Numbers 0-9
    // 0x30: 0
    [0x00, 0x3c, 0x66, 0x6e, 0x76, 0x66, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x31: 1
    [0x00, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7e, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x32: 2
    [0x00, 0x3c, 0x66, 0x0c, 0x18, 0x30, 0x7e, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x33: 3
    [0x00, 0x7e, 0x0c, 0x18, 0x0c, 0x66, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x34: 4
    [0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0x7e, 0x0c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x35: 5
    [0x00, 0x7e, 0x60, 0x7c, 0x06, 0x66, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x36: 6
    [0x00, 0x3c, 0x60, 0x7c, 0x66, 0x66, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x37: 7
    [0x00, 0x7e, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x38: 8
    [0x00, 0x3c, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x39: 9
    [0x00, 0x3c, 0x66, 0x3e, 0x06, 0x0c, 0x38, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x3A: :
    [0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x3B: ;
    [0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x3C: <
    [0x00, 0x0c, 0x18, 0x30, 0x18, 0x0c, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x3D: =
    [0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x3E: >
    [0x00, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x3F: ?
    [0x00, 0x3c, 0x66, 0x0c, 0x18, 0x00, 0x18, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x40: @
    [0x00, 0x3c, 0x66, 0x6e, 0x6e, 0x60, 0x3e, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x41-0x5A: Letters A-Z
    // 0x41: A
    [0x00, 0x18, 0x3c, 0x66, 0x66, 0x7e, 0x66, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x42: B
    [0x00, 0x7c, 0x66, 0x7c, 0x66, 0x66, 0x7c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x43: C
    [0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x44: D
    [0x00, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x45: E
    [0x00, 0x7e, 0x60, 0x7c, 0x60, 0x60, 0x7e, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x46: F
    [0x00, 0x7e, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x47: G
    [0x00, 0x3c, 0x66, 0x60, 0x6e, 0x66, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x48: H
    [0x00, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x49: I
    [0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x4A: J
    [0x00, 0x3e, 0x06, 0x06, 0x06, 0x66, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x4B: K
    [0x00, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0x66, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x4C: L
    [0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7e, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x4D: M
    [0x00, 0x63, 0x77, 0x7f, 0x6b, 0x63, 0x63, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x4E: N
    [0x00, 0x66, 0x76, 0x7e, 0x6e, 0x66, 0x66, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x4F: O
    [0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x50: P
    [0x00, 0x7c, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x51: Q
    [0x00, 0x3c, 0x66, 0x66, 0x6a, 0x6c, 0x36, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x52: R
    [0x00, 0x7c, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x53: S
    [0x00, 0x3c, 0x60, 0x3c, 0x06, 0x06, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x54: T
    [0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x55: U
    [0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x56: V
    [0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x57: W
    [0x00, 0x63, 0x63, 0x6b, 0x7f, 0x77, 0x63, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x58: X
    [0x00, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x66, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x59: Y
    [0x00, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x5A: Z
    [0x00, 0x7e, 0x0c, 0x18, 0x30, 0x60, 0x7e, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x5B: [
    [0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x5C: backslash
    [0x00, 0x40, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x03,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x5D: ]
    [0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x5E: ^
    [0x00, 0x18, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x5F: _
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x60: `
    [0x00, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x61-0x7A: Letters a-z (lowercase)
    // 0x61: a
    [0x00, 0x00, 0x3c, 0x06, 0x3e, 0x66, 0x3e, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x62: b
    [0x00, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x63: c
    [0x00, 0x00, 0x3c, 0x60, 0x60, 0x60, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x64: d
    [0x00, 0x06, 0x3e, 0x66, 0x66, 0x66, 0x3e, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x65: e
    [0x00, 0x00, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x66: f
    [0x00, 0x1c, 0x30, 0x7c, 0x30, 0x30, 0x30, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x67: g
    [0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x3c,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x68: h
    [0x00, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x69: i
    [0x00, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x6A: j
    [0x00, 0x0c, 0x00, 0x1c, 0x0c, 0x0c, 0x6c, 0x38,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x6B: k
    [0x00, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x6C: l
    [0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x6D: m
    [0x00, 0x00, 0x6c, 0x7e, 0x6b, 0x6b, 0x6b, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x6E: n
    [0x00, 0x00, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x6F: o
    [0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x70: p
    [0x00, 0x00, 0x7c, 0x66, 0x66, 0x7c, 0x60, 0x60,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x71: q
    [0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x06,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x72: r
    [0x00, 0x00, 0x6c, 0x76, 0x60, 0x60, 0x60, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x73: s
    [0x00, 0x00, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x74: t
    [0x00, 0x30, 0x7c, 0x30, 0x30, 0x36, 0x1c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x75: u
    [0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x76: v
    [0x00, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x77: w
    [0x00, 0x00, 0x63, 0x6b, 0x6b, 0x7f, 0x36, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x78: x
    [0x00, 0x00, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x79: y
    [0x00, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x3c,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x7A: z
    [0x00, 0x00, 0x7e, 0x0c, 0x18, 0x30, 0x7e, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x7B: {
    [0x00, 0x1c, 0x30, 0x60, 0x30, 0x30, 0x1c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x7C: |
    [0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x7D: }
    [0x00, 0x38, 0x0c, 0x06, 0x0c, 0x0c, 0x38, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x7E: ~
    [0x00, 0x00, 0x00, 0x6e, 0x3b, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // 0x7F: DEL
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
];

pub fn get_char_bitmap(ch: u8) -> &'static [u8; 16] {
    if ch < 128 {
        &BASIC_FONT[ch as usize]
    } else {
        &BASIC_FONT[0] // Return space for unknown characters
    }
}

pub trait FontRenderer {
    fn draw_char(&mut self, ch: u8, pos: Point, color: Color) -> Result<(), DeviceError>;
    fn draw_string(&mut self, text: &str, pos: Point, color: Color) -> Result<(), DeviceError>;
    fn measure_string(&self, text: &str) -> (u32, u32);
    fn draw_string_centered(&mut self, text: &str, rect: Rect, color: Color) -> Result<(), DeviceError>;
}

impl<T: ?Sized + Framebuffer> FontRenderer for T {
    fn draw_char(&mut self, ch: u8, pos: Point, color: Color) -> Result<(), DeviceError> {
        let bitmap = get_char_bitmap(ch);
        
        for y in 0..FONT_HEIGHT {
            let row = bitmap[y as usize];
            for x in 0..FONT_WIDTH {
                if (row & (0x80 >> x)) != 0 {
                    let pixel_x = pos.x + x as i32;
                    let pixel_y = pos.y + y as i32;
                    self.draw_pixel(Point::new(pixel_x, pixel_y), color)?;
                }
            }
        }
        
        Ok(())
    }

    fn draw_string(&mut self, text: &str, pos: Point, color: Color) -> Result<(), DeviceError> {
        let mut current_x = pos.x;
        let current_y = pos.y;
        
        for ch in text.bytes() {
            self.draw_char(ch, Point::new(current_x, current_y), color)?;
            current_x += FONT_WIDTH as i32;
        }
        
        Ok(())
    }

    fn measure_string(&self, text: &str) -> (u32, u32) {
        let width = text.len() as u32 * FONT_WIDTH;
        let height = FONT_HEIGHT;
        (width, height)
    }

    fn draw_string_centered(&mut self, text: &str, rect: Rect, color: Color) -> Result<(), DeviceError> {
        let (text_width, text_height) = self.measure_string(text);
        
        let center_x = rect.x + (rect.width as i32 - text_width as i32) / 2;
        let center_y = rect.y + (rect.height as i32 - text_height as i32) / 2;
        
        self.draw_string(text, Point::new(center_x, center_y), color)
    }
}